import * as vscode from 'vscode';
import { AppComponentType } from '../types/app-component-type.types';
import { getMakecomappJson } from './makecomappjson';

/**
 * Generates and returns a new component internal  ID, which is not used yet in `makecomapp.json`.
 * Used if new component is pulled or created.
 *
 * Internal ID is used in `makecomapp.json` only referencing inside this file only.
 * It means these internal IDs are converted to actual component ID before pull/deploy commands based on mapping defined
 * in makecomapp.json -> origin[] -> idMapping -> {componentType}
 *
 * TODO Fix limitation: This function does not reserve the generated (but unused yet) IDs. So cannot be called in parallel processing, because in this case it will return the same ID multiple times.
 */
export async function generateComponentInternalId(
	componentType: AppComponentType,
	componentId: string,
	appId: string | undefined,
	localAppRootdir: vscode.Uri,
): Promise<string> {

	const makecomappJson = await getMakecomappJson(localAppRootdir);

	let componentPseudoIdPrefix: string;
	let componentUnusedIndex: number | undefined;  // `undefined` means empty.

	switch (componentType) {
		case 'connection':
		case 'rpc':
		case 'webhook': {
			// Autogenerated ID
			// Explanation: Some component ID (like connections and may be some other kind of components)
			//              have naming convention as [appId][index].
			componentPseudoIdPrefix = componentType;
			componentUnusedIndex = 1;

			// Step 1: Try to isolate the number from end of original ID
			if (appId && componentId.startsWith(appId)) {
				// Note: This condition should be matched every time
				componentUnusedIndex = Number.parseInt(componentId.substring(appId.length) || '1', 10);
			}
			break;
		}
		default:
			// Node: module's and function's IDs are specified by user. Do not change it in local.
			componentPseudoIdPrefix = componentId;
	}

	// Step 2: If the component with same index already exists, increment the index to first free one
	while (makecomappJson.components[componentType][`${componentPseudoIdPrefix}${componentUnusedIndex ?? ''}`]) {
		componentUnusedIndex = (componentUnusedIndex ?? 1) + 1;
	}
	return `${componentPseudoIdPrefix}${componentUnusedIndex ?? ''}`;
}
